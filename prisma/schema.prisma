// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(name: "AccountToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(name: "SessionToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @default(cuid())
  name                   String                  @unique @default(cuid())
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]               @relation(name: "AccountToUser")
  sessions               Session[]               @relation(name: "SessionToUser")
  LeaderboardSubmissions LeaderboardSubmission[] @relation(name: "LeaderboardSubmissionToUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Leaderboard {
  id                     String                  @id @default(cuid())
  key                    String                  @unique
  LeaderboardSubmissions LeaderboardSubmission[] @relation(name: "LeaderboardToLeaderboardSubmission")
}

model LeaderboardSubmission {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(name: "LeaderboardSubmissionToUser", fields: [userId], references: [id], onDelete: Cascade)
  leaderboardKey  String
  leaderboard     Leaderboard @relation(name: "LeaderboardToLeaderboardSubmission", fields: [leaderboardKey], references: [key], onDelete: Cascade)
  score           Int
  metaData        Int[]
  submittedAtTime DateTime    @default(now())
}
